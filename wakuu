#!/bin/bash

# --Wakuu--
# is a script for creating a C like project structure and a Makefile

# Manual:
#
# wakuu -<language> -p <projectName>		-> creates a new <language> project named <projectName>, based on the <language> different project structure
# wakuu -<language> -c <className>			-> creates a new class of the language in given directories
#
#
#
#
#

function printManual() {
	echo "---Manual---"
	echo "wakuu is a small bash script for creating a C like project structure and a Makefile"
	echo ""
	echo "How to use:"
	echo ""
	echo "wakuu -p <name>		-> creates a new project named <name>"
	echo "wakuu -c <name>		-> creates a new class with <name>.h and <name>.c in given directories"
	echo "------"
}

function createClassC() {
	className=$1
	CWD=$(pwdx $$)

	headerContent="#pragma once\n\n"
	srcContent="#include \"$className.h\"\n\n"

	#create files and append to them
	cd src/ && touch "$className.h" && touch "$className.c"

	echo -e $headerContent >> "$className.h"
	echo -e $srcContent >> "$className.c"
	cd ..
}

# Functions for creating a project structure based on the given language
# Current support for:
# -c
# -cpp
# -java
# -python
# -html
# -bash
function createStructureC() {
	#create project structure:
	# $name/
	# |
	# |---src/
	# |		|-main.c
	# |---obj/
	# |		|-main.o
	# |---bin/
	# |		|-$name
	# |
	# |-Makefile

	#create directory with projectName
	name=$1
	mkdir $name
	#go into it
	cd $name

	#create subdirectories
	mkdir src
	mkdir obj
	mkdir bin

	#append content to files
	makefileContent="PROJECT\t:= $name\nCC\t:= gcc\nCFLAGS\t:= -Wall -Werror \n#-Wextra -pedantic\n\nSRC\t:= ./src\nBIN\t:= ./bin\nOBJ\t:= ./obj\n\nOBJECTS\t:= main.o\n\n.PHONY: default\ndefault: \$(OBJECTS)\n\t\$(CC) -o \$(BIN)/\$(PROJECT) \$(OBJ)/$^\n\n%.o: \$(SRC)/%.c\n\t\$(CC) -c $< -o \$(OBJ)/\$@ \$(CFLAGS)\n\n\nclean:\n\trm \$(OBJ)/*.o \$(BIN)/\$(PROJECT)"

	mainContent="#include<stdio.h>\n\nint main(int argc, char** argv) {\n\treturn 0;\n}"

	#create and append to files
	echo -e $makefileContent >> Makefile
	echo -e $mainContent >> src/main.c
}

function createStructureCPP() {
	#create project structure:
	# $name/
	# |
	# |---include/
	# |
	# |---src/
	# |		|-main.c
	# |---obj/
	# |		|-main.o
	# |---bin/
	# |		|-$name
	# |
	# |-Makefile

	#create directory with projectName
	name=$1
	mkdir $name
	#go into it
	cd $name

	#create subdirectories
	mkdir bin
	mkdir include
	mkdir src
	mkdir obj

	#append content to files
	makefileContent="PROJECT\t:= $name\nCC\t:= g++\nCFLAGS\t:= -Wall -Werror \n#-Wextra -pedantic\n\nINC\t:= ./include\nSRC\t:= ./src\nBIN\t:= ./bin\nOBJ\t:= ./obj\n\nOBJECTS\t:= main.o\n\n.PHONY: default\ndefault: \$(OBJECTS)\n\t\$(CC) -o \$(BIN)/\$(PROJECT) \$(OBJ)/$^\n\n%.o: \$(SRC)/%.cpp\n\t\$(CC) -c $< -o \$(OBJ)/\$@ \$(CFLAGS)\n\n\nclean:\n\trm \$(OBJ)/*.o \$(BIN)/\$(PROJECT)"

	mainContent="#include <iostream>\n\nint main(int argc, char **argv) {\n\tstd::cout << \"Hello World\" << '\\\n';\n\treturn 0;\n}"

	#create and append to files
	echo -e $makefileContent >> Makefile
	echo -e $mainContent >> src/main.cpp
}

function createStructureJava() {
	echo "Java"
}

function createStructurePython() {
	echo "Python"
}

function createStructureHTML() {
	echo "HTML"
}

function createStructureBash() {
	#create project structure
	# $name
	# |
	# |---$name.sh
	# |

	#create directory with project name
	name=$1
	mkdir $name
	#go into it
	cd $name

	#content of bash file
	bashContent="#!/bin/bash\n\n"

	#create bash file and append content
	echo -e $bashContent >> $name.sh
}


lang=$1
tag=$2
name=$3

CWD=$(pwdx $$)

if [ "$tag" = "-p" ]; then
	# Create Project structure
	# Check in which language
	if [ "$lang" = "-c" ]; then
		createStructureC $name
	elif [ "$lang" = "-cpp" ]; then
		createStructureCPP $name
	elif [ "$lang" = "-java" ]; then
		createStructureJava $name
	elif [ "$lang" = "-python" ]; then
		createStructurePython $name
	elif [ "$lang" = "-html" ]; then
		createStructureHTML $name
	elif [ "$lang" = "-bash" ]; then
		createStructureBash $name
	fi

elif [ "$tag" = "-c" ]; then
	#check if makefile and bin and src directory exists, if so a C project already exists
	CWD=$(pwdx $$)
	if [ -f "Makefile" ]; then
		echo "C Project exists - continue creating class $name"
		createClassC $name
	else
		#C Project doesn't exist, print manual
		#to advise to use -p flag
		echo "C Project doesn't exist"
		printManual
	fi
else
	echo "Wrong use"
	printManual
fi
